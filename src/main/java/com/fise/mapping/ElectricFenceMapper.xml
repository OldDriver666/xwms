<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fise.dao.ElectricFenceMapper">
  <resultMap id="BaseResultMap" type="com.fise.model.entity.ElectricFence">
    <id column="fence_id" jdbcType="INTEGER" property="fenceId" />
    <result column="device_id" jdbcType="INTEGER" property="deviceId" />
    <result column="status" jdbcType="BIT" property="status" />
    <result column="lng" jdbcType="VARCHAR" property="lng" />
    <result column="lat" jdbcType="VARCHAR" property="lat" />
    <result column="radius" jdbcType="INTEGER" property="radius" />
    <result column="mark" jdbcType="VARCHAR" property="mark" />
    <result column="updated" jdbcType="INTEGER" property="updated" />
    <result column="created" jdbcType="INTEGER" property="created" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    fence_id, device_id, status, lng, lat, radius, mark, updated, created
  </sql>
  <select id="selectByExample" parameterType="com.fise.model.entity.ElectricFenceExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ElectricFence
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from ElectricFence
    where fence_id = #{fenceId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from ElectricFence
    where fence_id = #{fenceId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.fise.model.entity.ElectricFenceExample">
    delete from ElectricFence
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.fise.model.entity.ElectricFence">
    insert into ElectricFence (fence_id, device_id, status, 
      lng, lat, radius, mark, 
      updated, created)
    values (#{fenceId,jdbcType=INTEGER}, #{deviceId,jdbcType=INTEGER}, #{status,jdbcType=BIT}, 
      #{lng,jdbcType=VARCHAR}, #{lat,jdbcType=VARCHAR}, #{radius,jdbcType=INTEGER}, #{mark,jdbcType=VARCHAR}, 
      #{updated,jdbcType=INTEGER}, #{created,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.fise.model.entity.ElectricFence">
    insert into ElectricFence
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="fenceId != null">
        fence_id,
      </if>
      <if test="deviceId != null">
        device_id,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="lng != null">
        lng,
      </if>
      <if test="lat != null">
        lat,
      </if>
      <if test="radius != null">
        radius,
      </if>
      <if test="mark != null">
        mark,
      </if>
      <if test="updated != null">
        updated,
      </if>
      <if test="created != null">
        created,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="fenceId != null">
        #{fenceId,jdbcType=INTEGER},
      </if>
      <if test="deviceId != null">
        #{deviceId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=BIT},
      </if>
      <if test="lng != null">
        #{lng,jdbcType=VARCHAR},
      </if>
      <if test="lat != null">
        #{lat,jdbcType=VARCHAR},
      </if>
      <if test="radius != null">
        #{radius,jdbcType=INTEGER},
      </if>
      <if test="mark != null">
        #{mark,jdbcType=VARCHAR},
      </if>
      <if test="updated != null">
        #{updated,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        #{created,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.fise.model.entity.ElectricFenceExample" resultType="java.lang.Long">
    select count(*) from ElectricFence
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update ElectricFence
    <set>
      <if test="record.fenceId != null">
        fence_id = #{record.fenceId,jdbcType=INTEGER},
      </if>
      <if test="record.deviceId != null">
        device_id = #{record.deviceId,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=BIT},
      </if>
      <if test="record.lng != null">
        lng = #{record.lng,jdbcType=VARCHAR},
      </if>
      <if test="record.lat != null">
        lat = #{record.lat,jdbcType=VARCHAR},
      </if>
      <if test="record.radius != null">
        radius = #{record.radius,jdbcType=INTEGER},
      </if>
      <if test="record.mark != null">
        mark = #{record.mark,jdbcType=VARCHAR},
      </if>
      <if test="record.updated != null">
        updated = #{record.updated,jdbcType=INTEGER},
      </if>
      <if test="record.created != null">
        created = #{record.created,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update ElectricFence
    set fence_id = #{record.fenceId,jdbcType=INTEGER},
      device_id = #{record.deviceId,jdbcType=INTEGER},
      status = #{record.status,jdbcType=BIT},
      lng = #{record.lng,jdbcType=VARCHAR},
      lat = #{record.lat,jdbcType=VARCHAR},
      radius = #{record.radius,jdbcType=INTEGER},
      mark = #{record.mark,jdbcType=VARCHAR},
      updated = #{record.updated,jdbcType=INTEGER},
      created = #{record.created,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.fise.model.entity.ElectricFence">
    update ElectricFence
    <set>
      <if test="deviceId != null">
        device_id = #{deviceId,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=BIT},
      </if>
      <if test="lng != null">
        lng = #{lng,jdbcType=VARCHAR},
      </if>
      <if test="lat != null">
        lat = #{lat,jdbcType=VARCHAR},
      </if>
      <if test="radius != null">
        radius = #{radius,jdbcType=INTEGER},
      </if>
      <if test="mark != null">
        mark = #{mark,jdbcType=VARCHAR},
      </if>
      <if test="updated != null">
        updated = #{updated,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=INTEGER},
      </if>
    </set>
    where fence_id = #{fenceId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fise.model.entity.ElectricFence">
    update ElectricFence
    set device_id = #{deviceId,jdbcType=INTEGER},
      status = #{status,jdbcType=BIT},
      lng = #{lng,jdbcType=VARCHAR},
      lat = #{lat,jdbcType=VARCHAR},
      radius = #{radius,jdbcType=INTEGER},
      mark = #{mark,jdbcType=VARCHAR},
      updated = #{updated,jdbcType=INTEGER},
      created = #{created,jdbcType=INTEGER}
    where fence_id = #{fenceId,jdbcType=INTEGER}
  </update>
</mapper>