diff --git a/src/main/java/com/fise/base/ErrorCode.java b/src/main/java/com/fise/base/ErrorCode.java
index b770156..7a28157 100644
--- a/src/main/java/com/fise/base/ErrorCode.java
+++ b/src/main/java/com/fise/base/ErrorCode.java
@@ -9,6 +9,7 @@ package com.fise.base;
 public enum ErrorCode {
 	ERROR_OK("ok", 0),
 	
+	
 	ERROR_PARAM_MEMBER_MOBILE_IS_EMPTY("参数手机号不能为空！", 10001),
 	ERROR_PARAM_MEMBER_PASSWD_IS_EMPTY("参数密码不能为空！", 10002),
 	ERROR_REGISTER_MEMBER_MOBILE_EXISTED("手机号已注册！", 10003),
@@ -46,6 +47,10 @@ public enum ErrorCode {
 	ERROR_GYM_NOT_COMPLETE_ORDER_EXIST("在本店有未完成的订单！", 10035),
 	ERROR_GYM_ACCOUNT_INDB_IS_NULL("该商户的账户信息不存在！", 10036),
 	ERROR_MANAGER_INDB_IS_NULL("该管理员不存在！", 10037),
+	ERROR_FISE_DEVICE_IME_EXISTED("设备IME已经存在",10038),
+	ERROR_FISE_DEVICE_ACCOUNT_EXISTED("设备账号已经存在",10039),
+	ERROR_FISE_DEVICE_PARAM_NULL("参数不能为空",10040),
+	ERROR_DB_RECORD_ALREADY_UNEXIST("记录不存在",10041),
 	
 	ERROR_CACHE("缓存错误！", 997),
 	ERROR_DATABASE("数据库错误！", 998),
diff --git a/src/main/java/com/fise/controller/fisedevice/fiseDeviceController.java b/src/main/java/com/fise/controller/fisedevice/fiseDeviceController.java
new file mode 100644
index 0000000..b533ca4
--- /dev/null
+++ b/src/main/java/com/fise/controller/fisedevice/fiseDeviceController.java
@@ -0,0 +1,77 @@
+package com.fise.controller.fisedevice;
+
+import javax.annotation.Resource;
+import javax.validation.Valid;
+
+import org.apache.log4j.Logger;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.RestController;
+
+import com.fise.base.Response;
+import com.fise.model.entity.FiseDevice;
+import com.fise.model.param.QueryFiseDeviceParam;
+import com.fise.server.fisedevice.FiseDeviceService;
+
+@RestController
+@RequestMapping("/admin")
+public class fiseDeviceController {
+	
+	private Logger logger=Logger.getLogger(getClass());
+	
+	@Resource
+	FiseDeviceService fiseDeviceService;
+	
+	/*添加fise设备*/
+	@RequestMapping(value="/addfisedevice",method=RequestMethod.POST)
+	public Response addFiseDevice(@RequestBody @Valid FiseDevice param){
+		
+		Response response=new Response();
+		
+		logger.info(param.toString());
+		response=fiseDeviceService.insertFiseDevice(param);
+		logger.info("end insert fisedevice"+response.toString());
+		
+		return response;
+	}
+	
+	/*查询fise设备     可以通过id  设备IME号    账号account*/
+	@RequestMapping(value="/queryfisedevice",method=RequestMethod.POST)
+	public Response queryFiseDevice(@RequestBody @Valid QueryFiseDeviceParam param){
+		
+		Response response=new Response();
+		
+		logger.info(param.toString());
+		response=fiseDeviceService.queryFiseDevice(param);
+		logger.info("end query fisedevice"+response.toString());
+		
+		return response;
+	}
+	
+	/*删除fise设备*/
+	@RequestMapping(value="/delfisedevice",method=RequestMethod.POST)
+	public Response delFiseDevice(@RequestBody @Valid QueryFiseDeviceParam param){
+		
+		Response response=new Response();
+		
+		logger.info(param.toString());
+		response=fiseDeviceService.delFiseDevice(param);
+		logger.info("end delete fisedevice"+response.toString());
+		
+		return response;
+	}
+	
+	/*修改fise设备信息*/
+	@RequestMapping(value="/updatefisedevice",method=RequestMethod.POST)
+	public Response updateFiseDevice(@RequestBody @Valid FiseDevice param){
+
+		Response response=new Response();
+		
+		logger.info(param.toString());
+		response=fiseDeviceService.updateFiseDevice(param);
+		logger.info("end delete fisedevice"+response.toString());
+		
+		return response;
+	}
+}
diff --git a/src/main/java/com/fise/dao/FiseDeviceMapper.java b/src/main/java/com/fise/dao/FiseDeviceMapper.java
new file mode 100644
index 0000000..da715a3
--- /dev/null
+++ b/src/main/java/com/fise/dao/FiseDeviceMapper.java
@@ -0,0 +1,30 @@
+package com.fise.dao;
+
+import com.fise.model.entity.FiseDevice;
+import com.fise.model.entity.FiseDeviceExample;
+import java.util.List;
+import org.apache.ibatis.annotations.Param;
+
+public interface FiseDeviceMapper {
+    long countByExample(FiseDeviceExample example);
+
+    int deleteByExample(FiseDeviceExample example);
+
+    int deleteByPrimaryKey(Integer id);
+
+    int insert(FiseDevice record);
+
+    int insertSelective(FiseDevice record);
+
+    List<FiseDevice> selectByExample(FiseDeviceExample example);
+
+    FiseDevice selectByPrimaryKey(Integer id);
+
+    int updateByExampleSelective(@Param("record") FiseDevice record, @Param("example") FiseDeviceExample example);
+
+    int updateByExample(@Param("record") FiseDevice record, @Param("example") FiseDeviceExample example);
+
+    int updateByPrimaryKeySelective(FiseDevice record);
+
+    int updateByPrimaryKey(FiseDevice record);
+}
\ No newline at end of file
diff --git a/src/main/java/com/fise/framework/aspect/AuthAspect.java b/src/main/java/com/fise/framework/aspect/AuthAspect.java
index e708fac..6c1c151 100644
--- a/src/main/java/com/fise/framework/aspect/AuthAspect.java
+++ b/src/main/java/com/fise/framework/aspect/AuthAspect.java
@@ -51,6 +51,7 @@ public class AuthAspect {
         if (uaField.length < 5) {
         	throw new RequestHeaderException("FIT-UA format error!");
         }
+        
         String platform = uaField[0];
         String system = uaField[1];
         String udid = uaField[2];
@@ -65,29 +66,32 @@ public class AuthAspect {
         if (StringUtil.isEmpty(versionName)) {
         	throw new RequestHeaderException("version name is empty!");
         }
+        System.out.println("-------------"+uri+"----------------");
         
     	HttpContext.setVersionName(versionName);
     	HttpContext.setPlatform(platform);
-        if (uri.startsWith("/admin")) {
-        	HttpContext.setMemberId(Integer.parseInt(id));
-        	accessToken = HttpContext.getRequest().getHeader(Constants.HEADER_FIELD_NAME_ACCESS_TOKEN);
-        	redisPoolName = Constants.REDIS_POOL_NAME_MEMBER;
-        	keyPrefix = Constants.REDIS_KEY_PREFIX_MEMBER_ACCESS_TOKEN;
-        } else if (uri.startsWith("/manage")) {
+    	
+    	if (uri.startsWith("/managesvr/admin")) {
+    		HttpContext.setMemberId(Integer.parseInt(id));
+    		accessToken = HttpContext.getRequest().getHeader(Constants.HEADER_FIELD_NAME_ACCESS_TOKEN);
+    		redisPoolName = Constants.REDIS_POOL_NAME_MEMBER;
+    		keyPrefix = Constants.REDIS_KEY_PREFIX_MEMBER_ACCESS_TOKEN;
+    	} else if (uri.startsWith("/managesvr/manage")) {
         	
-        	HttpContext.setManagerId(Integer.parseInt(id));
-        	accessToken = HttpContext.getRequest().getHeader(Constants.MANAGER_HEADER_FIELD_NAME_ACCESS_TOKEN);
-        	redisPoolName = Constants.REDIS_POOL_NAME_SYSTEM;
-        	keyPrefix = Constants.REDIS_KEY_PREFIX_MANAGER_ACCESS_TOKEN;
-        } else if (uri.startsWith("/gym")) {
-        	HttpContext.setGymId(Integer.parseInt(id));
-        	accessToken = HttpContext.getRequest().getHeader(Constants.GYM_HEADER_FIELD_NAME_ACCESS_TOKEN);
-        	redisPoolName = Constants.REDIS_POOL_NAME_GYM;
-        	keyPrefix = Constants.REDIS_KEY_PREFIX_GYM_ACCESS_TOKEN;
-        } else {
+    		HttpContext.setManagerId(Integer.parseInt(id));
+    		accessToken = HttpContext.getRequest().getHeader(Constants.MANAGER_HEADER_FIELD_NAME_ACCESS_TOKEN);
+    		redisPoolName = Constants.REDIS_POOL_NAME_SYSTEM;
+    		keyPrefix = Constants.REDIS_KEY_PREFIX_MANAGER_ACCESS_TOKEN;
+    	} else if (uri.startsWith("/managesvr/gym")) {
+    		HttpContext.setGymId(Integer.parseInt(id));
+    		accessToken = HttpContext.getRequest().getHeader(Constants.GYM_HEADER_FIELD_NAME_ACCESS_TOKEN);
+    		redisPoolName = Constants.REDIS_POOL_NAME_GYM;
+    		keyPrefix = Constants.REDIS_KEY_PREFIX_GYM_ACCESS_TOKEN;
+    	} else {
         	String message = "uri=" + uri + " not allowed";
         	throw new Exception(message);
         }
+    	
         if (StringUtil.isEmpty(accessToken)) {
         	throw new AuthException("access token is empty!");
         }
diff --git a/src/main/java/com/fise/mapping/FiseDeviceMapper.xml b/src/main/java/com/fise/mapping/FiseDeviceMapper.xml
new file mode 100644
index 0000000..ee2637a
--- /dev/null
+++ b/src/main/java/com/fise/mapping/FiseDeviceMapper.xml
@@ -0,0 +1,330 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
+<mapper namespace="com.fise.dao.FiseDeviceMapper">
+  <resultMap id="BaseResultMap" type="com.fise.model.entity.FiseDevice">
+    <id column="id" jdbcType="INTEGER" property="fiseId" />
+    <result column="IME" jdbcType="VARCHAR" property="ime" />
+    <result column="MAC" jdbcType="VARCHAR" property="mac" />
+    <result column="code" jdbcType="VARCHAR" property="code" />
+    <result column="status" jdbcType="BIT" property="status" />
+    <result column="account" jdbcType="VARCHAR" property="account" />
+    <result column="departId" jdbcType="INTEGER" property="departid" />
+    <result column="type" jdbcType="INTEGER" property="type" />
+    <result column="mobile" jdbcType="VARCHAR" property="mobile" />
+    <result column="mark" jdbcType="VARCHAR" property="mark" />
+    <result column="updated" jdbcType="INTEGER" property="updated" />
+    <result column="created" jdbcType="INTEGER" property="created" />
+  </resultMap>
+  <sql id="Example_Where_Clause">
+    <where>
+      <foreach collection="oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Update_By_Example_Where_Clause">
+    <where>
+      <foreach collection="example.oredCriteria" item="criteria" separator="or">
+        <if test="criteria.valid">
+          <trim prefix="(" prefixOverrides="and" suffix=")">
+            <foreach collection="criteria.criteria" item="criterion">
+              <choose>
+                <when test="criterion.noValue">
+                  and ${criterion.condition}
+                </when>
+                <when test="criterion.singleValue">
+                  and ${criterion.condition} #{criterion.value}
+                </when>
+                <when test="criterion.betweenValue">
+                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
+                </when>
+                <when test="criterion.listValue">
+                  and ${criterion.condition}
+                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
+                    #{listItem}
+                  </foreach>
+                </when>
+              </choose>
+            </foreach>
+          </trim>
+        </if>
+      </foreach>
+    </where>
+  </sql>
+  <sql id="Base_Column_List">
+    id, IME, MAC, code, status, account, departId, type, mobile, mark, updated, created
+  </sql>
+  <select id="selectByExample" parameterType="com.fise.model.entity.FiseDeviceExample" resultMap="BaseResultMap">
+    select
+    <if test="distinct">
+      distinct
+    </if>
+    <include refid="Base_Column_List" />
+    from FiseDevice
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+    <if test="orderByClause != null">
+      order by ${orderByClause}
+    </if>
+    <if test="limit != null">
+      <if test="offset != null">
+        limit ${offset}, ${limit}
+      </if>
+      <if test="offset == null">
+        limit ${limit}
+      </if>
+    </if>
+  </select>
+  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
+    select 
+    <include refid="Base_Column_List" />
+    from FiseDevice
+    where id = #{id,jdbcType=INTEGER}
+  </select>
+  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
+    delete from FiseDevice
+    where id = #{id,jdbcType=INTEGER}
+  </delete>
+  <delete id="deleteByExample" parameterType="com.fise.model.entity.FiseDeviceExample">
+    delete from FiseDevice
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </delete>
+  <insert id="insert" parameterType="com.fise.model.entity.FiseDevice">
+    insert into FiseDevice (id, IME, MAC, 
+      code, status, account, 
+      departId, type, mobile, 
+      mark, updated, created
+      )
+    values (#{fiseId,jdbcType=INTEGER}, #{ime,jdbcType=VARCHAR}, #{mac,jdbcType=VARCHAR}, 
+      #{code,jdbcType=VARCHAR}, #{status,jdbcType=BIT}, #{account,jdbcType=VARCHAR}, 
+      #{departid,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, #{mobile,jdbcType=VARCHAR}, 
+      #{mark,jdbcType=VARCHAR}, #{updated,jdbcType=INTEGER}, #{created,jdbcType=INTEGER}
+      )
+  </insert>
+  <insert id="insertSelective" parameterType="com.fise.model.entity.FiseDevice">
+    insert into FiseDevice
+    <trim prefix="(" suffix=")" suffixOverrides=",">
+      <if test="fiseId != null">
+        id,
+      </if>
+      <if test="ime != null">
+        IME,
+      </if>
+      <if test="mac != null">
+        MAC,
+      </if>
+      <if test="code != null">
+        code,
+      </if>
+      <if test="status != null">
+        status,
+      </if>
+      <if test="account != null">
+        account,
+      </if>
+      <if test="departid != null">
+        departId,
+      </if>
+      <if test="type != null">
+        type,
+      </if>
+      <if test="mobile != null">
+        mobile,
+      </if>
+      <if test="mark != null">
+        mark,
+      </if>
+      <if test="updated != null">
+        updated,
+      </if>
+      <if test="created != null">
+        created,
+      </if>
+    </trim>
+    <trim prefix="values (" suffix=")" suffixOverrides=",">
+      <if test="fiseId != null">
+        #{fiseId,jdbcType=INTEGER},
+      </if>
+      <if test="ime != null">
+        #{ime,jdbcType=VARCHAR},
+      </if>
+      <if test="mac != null">
+        #{mac,jdbcType=VARCHAR},
+      </if>
+      <if test="code != null">
+        #{code,jdbcType=VARCHAR},
+      </if>
+      <if test="status != null">
+        #{status,jdbcType=BIT},
+      </if>
+      <if test="account != null">
+        #{account,jdbcType=VARCHAR},
+      </if>
+      <if test="departid != null">
+        #{departid,jdbcType=INTEGER},
+      </if>
+      <if test="type != null">
+        #{type,jdbcType=INTEGER},
+      </if>
+      <if test="mobile != null">
+        #{mobile,jdbcType=VARCHAR},
+      </if>
+      <if test="mark != null">
+        #{mark,jdbcType=VARCHAR},
+      </if>
+      <if test="updated != null">
+        #{updated,jdbcType=INTEGER},
+      </if>
+      <if test="created != null">
+        #{created,jdbcType=INTEGER},
+      </if>
+    </trim>
+  </insert>
+  <select id="countByExample" parameterType="com.fise.model.entity.FiseDeviceExample" resultType="java.lang.Long">
+    select count(*) from FiseDevice
+    <if test="_parameter != null">
+      <include refid="Example_Where_Clause" />
+    </if>
+  </select>
+  <update id="updateByExampleSelective" parameterType="map">
+    update FiseDevice
+    <set>
+      <if test="record.fiseId != null">
+        id = #{record.fiseId,jdbcType=INTEGER},
+      </if>
+      <if test="record.ime != null">
+        IME = #{record.ime,jdbcType=VARCHAR},
+      </if>
+      <if test="record.mac != null">
+        MAC = #{record.mac,jdbcType=VARCHAR},
+      </if>
+      <if test="record.code != null">
+        code = #{record.code,jdbcType=VARCHAR},
+      </if>
+      <if test="record.status != null">
+        status = #{record.status,jdbcType=BIT},
+      </if>
+      <if test="record.account != null">
+        account = #{record.account,jdbcType=VARCHAR},
+      </if>
+      <if test="record.departid != null">
+        departId = #{record.departid,jdbcType=INTEGER},
+      </if>
+      <if test="record.type != null">
+        type = #{record.type,jdbcType=INTEGER},
+      </if>
+      <if test="record.mobile != null">
+        mobile = #{record.mobile,jdbcType=VARCHAR},
+      </if>
+      <if test="record.mark != null">
+        mark = #{record.mark,jdbcType=VARCHAR},
+      </if>
+      <if test="record.updated != null">
+        updated = #{record.updated,jdbcType=INTEGER},
+      </if>
+      <if test="record.created != null">
+        created = #{record.created,jdbcType=INTEGER},
+      </if>
+    </set>
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByExample" parameterType="map">
+    update FiseDevice
+    set id = #{record.fiseId,jdbcType=INTEGER},
+      IME = #{record.ime,jdbcType=VARCHAR},
+      MAC = #{record.mac,jdbcType=VARCHAR},
+      code = #{record.code,jdbcType=VARCHAR},
+      status = #{record.status,jdbcType=BIT},
+      account = #{record.account,jdbcType=VARCHAR},
+      departId = #{record.departid,jdbcType=INTEGER},
+      type = #{record.type,jdbcType=INTEGER},
+      mobile = #{record.mobile,jdbcType=VARCHAR},
+      mark = #{record.mark,jdbcType=VARCHAR},
+      updated = #{record.updated,jdbcType=INTEGER},
+      created = #{record.created,jdbcType=INTEGER}
+    <if test="_parameter != null">
+      <include refid="Update_By_Example_Where_Clause" />
+    </if>
+  </update>
+  <update id="updateByPrimaryKeySelective" parameterType="com.fise.model.entity.FiseDevice">
+    update FiseDevice
+    <set>
+      <if test="ime != null">
+        IME = #{ime,jdbcType=VARCHAR},
+      </if>
+      <if test="mac != null">
+        MAC = #{mac,jdbcType=VARCHAR},
+      </if>
+      <if test="code != null">
+        code = #{code,jdbcType=VARCHAR},
+      </if>
+      <if test="status != null">
+        status = #{status,jdbcType=BIT},
+      </if>
+      <if test="account != null">
+        account = #{account,jdbcType=VARCHAR},
+      </if>
+      <if test="departid != null">
+        departId = #{departid,jdbcType=INTEGER},
+      </if>
+      <if test="type != null">
+        type = #{type,jdbcType=INTEGER},
+      </if>
+      <if test="mobile != null">
+        mobile = #{mobile,jdbcType=VARCHAR},
+      </if>
+      <if test="mark != null">
+        mark = #{mark,jdbcType=VARCHAR},
+      </if>
+      <if test="updated != null">
+        updated = #{updated,jdbcType=INTEGER},
+      </if>
+      <if test="created != null">
+        created = #{created,jdbcType=INTEGER},
+      </if>
+    </set>
+    where id = #{fiseId,jdbcType=INTEGER}
+  </update>
+  <update id="updateByPrimaryKey" parameterType="com.fise.model.entity.FiseDevice">
+    update FiseDevice
+    set IME = #{ime,jdbcType=VARCHAR},
+      MAC = #{mac,jdbcType=VARCHAR},
+      code = #{code,jdbcType=VARCHAR},
+      status = #{status,jdbcType=BIT},
+      account = #{account,jdbcType=VARCHAR},
+      departId = #{departid,jdbcType=INTEGER},
+      type = #{type,jdbcType=INTEGER},
+      mobile = #{mobile,jdbcType=VARCHAR},
+      mark = #{mark,jdbcType=VARCHAR},
+      updated = #{updated,jdbcType=INTEGER},
+      created = #{created,jdbcType=INTEGER}
+    where id = #{fiseId,jdbcType=INTEGER}
+  </update>
+</mapper>
\ No newline at end of file
diff --git a/src/main/java/com/fise/model/entity/FiseDevice.java b/src/main/java/com/fise/model/entity/FiseDevice.java
index 80f7035..3033dca 100644
--- a/src/main/java/com/fise/model/entity/FiseDevice.java
+++ b/src/main/java/com/fise/model/entity/FiseDevice.java
@@ -1,79 +1,163 @@
 package com.fise.model.entity;
 
-public class FiseDevice {
-	private int DeviceId;
-	private String DeviceIME;
-	private String DeviceXW;
-	private int DepartId;
-	private int ProductType;
-	private int ProductName;
-	private String PhoneNo;
-	private int status;
-	
-	
-	
-	public int getDeviceId() {
-		return DeviceId;
-	}
-	public void setDeviceId(int deviceId) {
-		DeviceId = deviceId;
-	}
-	public int getProductName() {
-		return ProductName;
-	}
-	public void setProductName(int productName) {
-		ProductName = productName;
-	}
-	public String getPhoneNo() {
-		return PhoneNo;
-	}
-	public void setPhoneNo(String phoneNo) {
-		PhoneNo = phoneNo;
-	}
-	public int getStatus() {
-		return status;
-	}
-	public void setStatus(int status) {
-		this.status = status;
-	}
-	public String getDeviceIME() {
-		return DeviceIME;
-	}
-	public void setDeviceIME(String deviceIME) {
-		DeviceIME = deviceIME;
-	}
-	public String getDeviceXW() {
-		return DeviceXW;
-	}
-	public void setDeviceXW(String deviceXW) {
-		DeviceXW = deviceXW;
-	}
-	public int getDepartId() {
-		return DepartId;
-	}
-	public void setDepartId(int departId) {
-		DepartId = departId;
-	}
-	public int getProductType() {
-		return ProductType;
-	}
-	public void setProductType(int productType) {
-		ProductType = productType;
-	}
-	
-	public FiseDevice(String deviceIME, String deviceXW, int departId,
-			int productType) {
-		super();
-		
-		DeviceIME = deviceIME;
-		DeviceXW = deviceXW;
-		DepartId = departId;
-		ProductType = productType;
+import java.io.Serializable;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+/**
+ * @author 
+ */
+public class FiseDevice implements Serializable {
+	@JsonProperty("fise_id")
+    private Integer fiseId;
+
+    /**
+     * 设备IME号
+     */
+    private String ime;
+
+    /**
+     * 设备蓝牙地址
+     */
+    private String mac;
+
+    /**
+     * 设备暗码
+     */
+    private String code;
+
+    /**
+     * 状态 0-出厂 1-激活 2-删除
+     */
+    private Boolean status;
+
+    /**
+     * 小位号-账号
+     */
+    private String account;
+
+    /**
+     * 公司/团体ID
+     */
+    @JsonProperty("depart_id")
+    private Integer departid;
+
+    /**
+     * 设备类型
+     */
+    private Integer type;
+
+    /**
+     * 手机号
+     */
+    private String mobile;
+
+    /**
+     * 备注信息
+     */
+    private String mark;
+
+    private Integer updated;
+
+    private Integer created;
+
+    private static final long serialVersionUID = 1L;
+
+    
+
+    public Integer getFiseId() {
+		return fiseId;
 	}
-	public FiseDevice() {
-		super();
-		// TODO Auto-generated constructor stub
+
+	public void setFiseId(Integer fiseId) {
+		this.fiseId = fiseId;
 	}
-	
-	
-}
+
+	public String getIme() {
+        return ime;
+    }
+
+    public void setIme(String ime) {
+        this.ime = ime;
+    }
+
+    public String getMac() {
+        return mac;
+    }
+
+    public void setMac(String mac) {
+        this.mac = mac;
+    }
+
+    public String getCode() {
+        return code;
+    }
+
+    public void setCode(String code) {
+        this.code = code;
+    }
+
+    public Boolean getStatus() {
+        return status;
+    }
+
+    public void setStatus(Boolean status) {
+        this.status = status;
+    }
+
+    public String getAccount() {
+        return account;
+    }
+
+    public void setAccount(String account) {
+        this.account = account;
+    }
+
+    public Integer getDepartid() {
+        return departid;
+    }
+
+    public void setDepartid(Integer departid) {
+        this.departid = departid;
+    }
+
+    public Integer getType() {
+        return type;
+    }
+
+    public void setType(Integer type) {
+        this.type = type;
+    }
+
+    public String getMobile() {
+        return mobile;
+    }
+
+    public void setMobile(String mobile) {
+        this.mobile = mobile;
+    }
+
+    public String getMark() {
+        return mark;
+    }
+
+    public void setMark(String mark) {
+        this.mark = mark;
+    }
+
+    public Integer getUpdated() {
+        return updated;
+    }
+
+    public void setUpdated(Integer updated) {
+        this.updated = updated;
+    }
+
+    public Integer getCreated() {
+        return created;
+    }
+
+    public void setCreated(Integer created) {
+        this.created = created;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/fise/model/entity/FiseDeviceExample.java b/src/main/java/com/fise/model/entity/FiseDeviceExample.java
new file mode 100644
index 0000000..f86e995
--- /dev/null
+++ b/src/main/java/com/fise/model/entity/FiseDeviceExample.java
@@ -0,0 +1,1002 @@
+package com.fise.model.entity;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class FiseDeviceExample {
+    protected String orderByClause;
+
+    protected boolean distinct;
+
+    protected List<Criteria> oredCriteria;
+
+    private Integer limit;
+
+    private Integer offset;
+
+    public FiseDeviceExample() {
+        oredCriteria = new ArrayList<Criteria>();
+    }
+
+    public void setOrderByClause(String orderByClause) {
+        this.orderByClause = orderByClause;
+    }
+
+    public String getOrderByClause() {
+        return orderByClause;
+    }
+
+    public void setDistinct(boolean distinct) {
+        this.distinct = distinct;
+    }
+
+    public boolean isDistinct() {
+        return distinct;
+    }
+
+    public List<Criteria> getOredCriteria() {
+        return oredCriteria;
+    }
+
+    public void or(Criteria criteria) {
+        oredCriteria.add(criteria);
+    }
+
+    public Criteria or() {
+        Criteria criteria = createCriteriaInternal();
+        oredCriteria.add(criteria);
+        return criteria;
+    }
+
+    public Criteria createCriteria() {
+        Criteria criteria = createCriteriaInternal();
+        if (oredCriteria.size() == 0) {
+            oredCriteria.add(criteria);
+        }
+        return criteria;
+    }
+
+    protected Criteria createCriteriaInternal() {
+        Criteria criteria = new Criteria();
+        return criteria;
+    }
+
+    public void clear() {
+        oredCriteria.clear();
+        orderByClause = null;
+        distinct = false;
+    }
+
+    public void setLimit(Integer limit) {
+        this.limit = limit;
+    }
+
+    public Integer getLimit() {
+        return limit;
+    }
+
+    public void setOffset(Integer offset) {
+        this.offset = offset;
+    }
+
+    public Integer getOffset() {
+        return offset;
+    }
+
+    protected abstract static class GeneratedCriteria {
+        protected List<Criterion> criteria;
+
+        protected GeneratedCriteria() {
+            super();
+            criteria = new ArrayList<Criterion>();
+        }
+
+        public boolean isValid() {
+            return criteria.size() > 0;
+        }
+
+        public List<Criterion> getAllCriteria() {
+            return criteria;
+        }
+
+        public List<Criterion> getCriteria() {
+            return criteria;
+        }
+
+        protected void addCriterion(String condition) {
+            if (condition == null) {
+                throw new RuntimeException("Value for condition cannot be null");
+            }
+            criteria.add(new Criterion(condition));
+        }
+
+        protected void addCriterion(String condition, Object value, String property) {
+            if (value == null) {
+                throw new RuntimeException("Value for " + property + " cannot be null");
+            }
+            criteria.add(new Criterion(condition, value));
+        }
+
+        protected void addCriterion(String condition, Object value1, Object value2, String property) {
+            if (value1 == null || value2 == null) {
+                throw new RuntimeException("Between values for " + property + " cannot be null");
+            }
+            criteria.add(new Criterion(condition, value1, value2));
+        }
+
+        public Criteria andIdIsNull() {
+            addCriterion("id is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdIsNotNull() {
+            addCriterion("id is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdEqualTo(Integer value) {
+            addCriterion("id =", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdNotEqualTo(Integer value) {
+            addCriterion("id <>", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdGreaterThan(Integer value) {
+            addCriterion("id >", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
+            addCriterion("id >=", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdLessThan(Integer value) {
+            addCriterion("id <", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdLessThanOrEqualTo(Integer value) {
+            addCriterion("id <=", value, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdIn(List<Integer> values) {
+            addCriterion("id in", values, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdNotIn(List<Integer> values) {
+            addCriterion("id not in", values, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdBetween(Integer value1, Integer value2) {
+            addCriterion("id between", value1, value2, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andIdNotBetween(Integer value1, Integer value2) {
+            addCriterion("id not between", value1, value2, "id");
+            return (Criteria) this;
+        }
+
+        public Criteria andImeIsNull() {
+            addCriterion("IME is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andImeIsNotNull() {
+            addCriterion("IME is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andImeEqualTo(String value) {
+            addCriterion("IME =", value, "ime");
+            return (Criteria) this;
+        }
+
+        public Criteria andImeNotEqualTo(String value) {
+            addCriterion("IME <>", value, "ime");
+            return (Criteria) this;
+        }
+
+        public Criteria andImeGreaterThan(String value) {
+            addCriterion("IME >", value, "ime");
+            return (Criteria) this;
+        }
+
+        public Criteria andImeGreaterThanOrEqualTo(String value) {
+            addCriterion("IME >=", value, "ime");
+            return (Criteria) this;
+        }
+
+        public Criteria andImeLessThan(String value) {
+            addCriterion("IME <", value, "ime");
+            return (Criteria) this;
+        }
+
+        public Criteria andImeLessThanOrEqualTo(String value) {
+            addCriterion("IME <=", value, "ime");
+            return (Criteria) this;
+        }
+
+        public Criteria andImeLike(String value) {
+            addCriterion("IME like", value, "ime");
+            return (Criteria) this;
+        }
+
+        public Criteria andImeNotLike(String value) {
+            addCriterion("IME not like", value, "ime");
+            return (Criteria) this;
+        }
+
+        public Criteria andImeIn(List<String> values) {
+            addCriterion("IME in", values, "ime");
+            return (Criteria) this;
+        }
+
+        public Criteria andImeNotIn(List<String> values) {
+            addCriterion("IME not in", values, "ime");
+            return (Criteria) this;
+        }
+
+        public Criteria andImeBetween(String value1, String value2) {
+            addCriterion("IME between", value1, value2, "ime");
+            return (Criteria) this;
+        }
+
+        public Criteria andImeNotBetween(String value1, String value2) {
+            addCriterion("IME not between", value1, value2, "ime");
+            return (Criteria) this;
+        }
+
+        public Criteria andMacIsNull() {
+            addCriterion("MAC is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andMacIsNotNull() {
+            addCriterion("MAC is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andMacEqualTo(String value) {
+            addCriterion("MAC =", value, "mac");
+            return (Criteria) this;
+        }
+
+        public Criteria andMacNotEqualTo(String value) {
+            addCriterion("MAC <>", value, "mac");
+            return (Criteria) this;
+        }
+
+        public Criteria andMacGreaterThan(String value) {
+            addCriterion("MAC >", value, "mac");
+            return (Criteria) this;
+        }
+
+        public Criteria andMacGreaterThanOrEqualTo(String value) {
+            addCriterion("MAC >=", value, "mac");
+            return (Criteria) this;
+        }
+
+        public Criteria andMacLessThan(String value) {
+            addCriterion("MAC <", value, "mac");
+            return (Criteria) this;
+        }
+
+        public Criteria andMacLessThanOrEqualTo(String value) {
+            addCriterion("MAC <=", value, "mac");
+            return (Criteria) this;
+        }
+
+        public Criteria andMacLike(String value) {
+            addCriterion("MAC like", value, "mac");
+            return (Criteria) this;
+        }
+
+        public Criteria andMacNotLike(String value) {
+            addCriterion("MAC not like", value, "mac");
+            return (Criteria) this;
+        }
+
+        public Criteria andMacIn(List<String> values) {
+            addCriterion("MAC in", values, "mac");
+            return (Criteria) this;
+        }
+
+        public Criteria andMacNotIn(List<String> values) {
+            addCriterion("MAC not in", values, "mac");
+            return (Criteria) this;
+        }
+
+        public Criteria andMacBetween(String value1, String value2) {
+            addCriterion("MAC between", value1, value2, "mac");
+            return (Criteria) this;
+        }
+
+        public Criteria andMacNotBetween(String value1, String value2) {
+            addCriterion("MAC not between", value1, value2, "mac");
+            return (Criteria) this;
+        }
+
+        public Criteria andCodeIsNull() {
+            addCriterion("code is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andCodeIsNotNull() {
+            addCriterion("code is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andCodeEqualTo(String value) {
+            addCriterion("code =", value, "code");
+            return (Criteria) this;
+        }
+
+        public Criteria andCodeNotEqualTo(String value) {
+            addCriterion("code <>", value, "code");
+            return (Criteria) this;
+        }
+
+        public Criteria andCodeGreaterThan(String value) {
+            addCriterion("code >", value, "code");
+            return (Criteria) this;
+        }
+
+        public Criteria andCodeGreaterThanOrEqualTo(String value) {
+            addCriterion("code >=", value, "code");
+            return (Criteria) this;
+        }
+
+        public Criteria andCodeLessThan(String value) {
+            addCriterion("code <", value, "code");
+            return (Criteria) this;
+        }
+
+        public Criteria andCodeLessThanOrEqualTo(String value) {
+            addCriterion("code <=", value, "code");
+            return (Criteria) this;
+        }
+
+        public Criteria andCodeLike(String value) {
+            addCriterion("code like", value, "code");
+            return (Criteria) this;
+        }
+
+        public Criteria andCodeNotLike(String value) {
+            addCriterion("code not like", value, "code");
+            return (Criteria) this;
+        }
+
+        public Criteria andCodeIn(List<String> values) {
+            addCriterion("code in", values, "code");
+            return (Criteria) this;
+        }
+
+        public Criteria andCodeNotIn(List<String> values) {
+            addCriterion("code not in", values, "code");
+            return (Criteria) this;
+        }
+
+        public Criteria andCodeBetween(String value1, String value2) {
+            addCriterion("code between", value1, value2, "code");
+            return (Criteria) this;
+        }
+
+        public Criteria andCodeNotBetween(String value1, String value2) {
+            addCriterion("code not between", value1, value2, "code");
+            return (Criteria) this;
+        }
+
+        public Criteria andStatusIsNull() {
+            addCriterion("status is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andStatusIsNotNull() {
+            addCriterion("status is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andStatusEqualTo(Boolean value) {
+            addCriterion("status =", value, "status");
+            return (Criteria) this;
+        }
+
+        public Criteria andStatusNotEqualTo(Boolean value) {
+            addCriterion("status <>", value, "status");
+            return (Criteria) this;
+        }
+
+        public Criteria andStatusGreaterThan(Boolean value) {
+            addCriterion("status >", value, "status");
+            return (Criteria) this;
+        }
+
+        public Criteria andStatusGreaterThanOrEqualTo(Boolean value) {
+            addCriterion("status >=", value, "status");
+            return (Criteria) this;
+        }
+
+        public Criteria andStatusLessThan(Boolean value) {
+            addCriterion("status <", value, "status");
+            return (Criteria) this;
+        }
+
+        public Criteria andStatusLessThanOrEqualTo(Boolean value) {
+            addCriterion("status <=", value, "status");
+            return (Criteria) this;
+        }
+
+        public Criteria andStatusIn(List<Boolean> values) {
+            addCriterion("status in", values, "status");
+            return (Criteria) this;
+        }
+
+        public Criteria andStatusNotIn(List<Boolean> values) {
+            addCriterion("status not in", values, "status");
+            return (Criteria) this;
+        }
+
+        public Criteria andStatusBetween(Boolean value1, Boolean value2) {
+            addCriterion("status between", value1, value2, "status");
+            return (Criteria) this;
+        }
+
+        public Criteria andStatusNotBetween(Boolean value1, Boolean value2) {
+            addCriterion("status not between", value1, value2, "status");
+            return (Criteria) this;
+        }
+
+        public Criteria andAccountIsNull() {
+            addCriterion("account is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andAccountIsNotNull() {
+            addCriterion("account is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andAccountEqualTo(String value) {
+            addCriterion("account =", value, "account");
+            return (Criteria) this;
+        }
+
+        public Criteria andAccountNotEqualTo(String value) {
+            addCriterion("account <>", value, "account");
+            return (Criteria) this;
+        }
+
+        public Criteria andAccountGreaterThan(String value) {
+            addCriterion("account >", value, "account");
+            return (Criteria) this;
+        }
+
+        public Criteria andAccountGreaterThanOrEqualTo(String value) {
+            addCriterion("account >=", value, "account");
+            return (Criteria) this;
+        }
+
+        public Criteria andAccountLessThan(String value) {
+            addCriterion("account <", value, "account");
+            return (Criteria) this;
+        }
+
+        public Criteria andAccountLessThanOrEqualTo(String value) {
+            addCriterion("account <=", value, "account");
+            return (Criteria) this;
+        }
+
+        public Criteria andAccountLike(String value) {
+            addCriterion("account like", value, "account");
+            return (Criteria) this;
+        }
+
+        public Criteria andAccountNotLike(String value) {
+            addCriterion("account not like", value, "account");
+            return (Criteria) this;
+        }
+
+        public Criteria andAccountIn(List<String> values) {
+            addCriterion("account in", values, "account");
+            return (Criteria) this;
+        }
+
+        public Criteria andAccountNotIn(List<String> values) {
+            addCriterion("account not in", values, "account");
+            return (Criteria) this;
+        }
+
+        public Criteria andAccountBetween(String value1, String value2) {
+            addCriterion("account between", value1, value2, "account");
+            return (Criteria) this;
+        }
+
+        public Criteria andAccountNotBetween(String value1, String value2) {
+            addCriterion("account not between", value1, value2, "account");
+            return (Criteria) this;
+        }
+
+        public Criteria andDepartidIsNull() {
+            addCriterion("departId is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andDepartidIsNotNull() {
+            addCriterion("departId is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andDepartidEqualTo(Integer value) {
+            addCriterion("departId =", value, "departid");
+            return (Criteria) this;
+        }
+
+        public Criteria andDepartidNotEqualTo(Integer value) {
+            addCriterion("departId <>", value, "departid");
+            return (Criteria) this;
+        }
+
+        public Criteria andDepartidGreaterThan(Integer value) {
+            addCriterion("departId >", value, "departid");
+            return (Criteria) this;
+        }
+
+        public Criteria andDepartidGreaterThanOrEqualTo(Integer value) {
+            addCriterion("departId >=", value, "departid");
+            return (Criteria) this;
+        }
+
+        public Criteria andDepartidLessThan(Integer value) {
+            addCriterion("departId <", value, "departid");
+            return (Criteria) this;
+        }
+
+        public Criteria andDepartidLessThanOrEqualTo(Integer value) {
+            addCriterion("departId <=", value, "departid");
+            return (Criteria) this;
+        }
+
+        public Criteria andDepartidIn(List<Integer> values) {
+            addCriterion("departId in", values, "departid");
+            return (Criteria) this;
+        }
+
+        public Criteria andDepartidNotIn(List<Integer> values) {
+            addCriterion("departId not in", values, "departid");
+            return (Criteria) this;
+        }
+
+        public Criteria andDepartidBetween(Integer value1, Integer value2) {
+            addCriterion("departId between", value1, value2, "departid");
+            return (Criteria) this;
+        }
+
+        public Criteria andDepartidNotBetween(Integer value1, Integer value2) {
+            addCriterion("departId not between", value1, value2, "departid");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeIsNull() {
+            addCriterion("type is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeIsNotNull() {
+            addCriterion("type is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeEqualTo(Integer value) {
+            addCriterion("type =", value, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeNotEqualTo(Integer value) {
+            addCriterion("type <>", value, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeGreaterThan(Integer value) {
+            addCriterion("type >", value, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeGreaterThanOrEqualTo(Integer value) {
+            addCriterion("type >=", value, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeLessThan(Integer value) {
+            addCriterion("type <", value, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeLessThanOrEqualTo(Integer value) {
+            addCriterion("type <=", value, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeIn(List<Integer> values) {
+            addCriterion("type in", values, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeNotIn(List<Integer> values) {
+            addCriterion("type not in", values, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeBetween(Integer value1, Integer value2) {
+            addCriterion("type between", value1, value2, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andTypeNotBetween(Integer value1, Integer value2) {
+            addCriterion("type not between", value1, value2, "type");
+            return (Criteria) this;
+        }
+
+        public Criteria andMobileIsNull() {
+            addCriterion("mobile is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andMobileIsNotNull() {
+            addCriterion("mobile is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andMobileEqualTo(String value) {
+            addCriterion("mobile =", value, "mobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andMobileNotEqualTo(String value) {
+            addCriterion("mobile <>", value, "mobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andMobileGreaterThan(String value) {
+            addCriterion("mobile >", value, "mobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andMobileGreaterThanOrEqualTo(String value) {
+            addCriterion("mobile >=", value, "mobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andMobileLessThan(String value) {
+            addCriterion("mobile <", value, "mobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andMobileLessThanOrEqualTo(String value) {
+            addCriterion("mobile <=", value, "mobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andMobileLike(String value) {
+            addCriterion("mobile like", value, "mobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andMobileNotLike(String value) {
+            addCriterion("mobile not like", value, "mobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andMobileIn(List<String> values) {
+            addCriterion("mobile in", values, "mobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andMobileNotIn(List<String> values) {
+            addCriterion("mobile not in", values, "mobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andMobileBetween(String value1, String value2) {
+            addCriterion("mobile between", value1, value2, "mobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andMobileNotBetween(String value1, String value2) {
+            addCriterion("mobile not between", value1, value2, "mobile");
+            return (Criteria) this;
+        }
+
+        public Criteria andMarkIsNull() {
+            addCriterion("mark is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andMarkIsNotNull() {
+            addCriterion("mark is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andMarkEqualTo(String value) {
+            addCriterion("mark =", value, "mark");
+            return (Criteria) this;
+        }
+
+        public Criteria andMarkNotEqualTo(String value) {
+            addCriterion("mark <>", value, "mark");
+            return (Criteria) this;
+        }
+
+        public Criteria andMarkGreaterThan(String value) {
+            addCriterion("mark >", value, "mark");
+            return (Criteria) this;
+        }
+
+        public Criteria andMarkGreaterThanOrEqualTo(String value) {
+            addCriterion("mark >=", value, "mark");
+            return (Criteria) this;
+        }
+
+        public Criteria andMarkLessThan(String value) {
+            addCriterion("mark <", value, "mark");
+            return (Criteria) this;
+        }
+
+        public Criteria andMarkLessThanOrEqualTo(String value) {
+            addCriterion("mark <=", value, "mark");
+            return (Criteria) this;
+        }
+
+        public Criteria andMarkLike(String value) {
+            addCriterion("mark like", value, "mark");
+            return (Criteria) this;
+        }
+
+        public Criteria andMarkNotLike(String value) {
+            addCriterion("mark not like", value, "mark");
+            return (Criteria) this;
+        }
+
+        public Criteria andMarkIn(List<String> values) {
+            addCriterion("mark in", values, "mark");
+            return (Criteria) this;
+        }
+
+        public Criteria andMarkNotIn(List<String> values) {
+            addCriterion("mark not in", values, "mark");
+            return (Criteria) this;
+        }
+
+        public Criteria andMarkBetween(String value1, String value2) {
+            addCriterion("mark between", value1, value2, "mark");
+            return (Criteria) this;
+        }
+
+        public Criteria andMarkNotBetween(String value1, String value2) {
+            addCriterion("mark not between", value1, value2, "mark");
+            return (Criteria) this;
+        }
+
+        public Criteria andUpdatedIsNull() {
+            addCriterion("updated is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andUpdatedIsNotNull() {
+            addCriterion("updated is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andUpdatedEqualTo(Integer value) {
+            addCriterion("updated =", value, "updated");
+            return (Criteria) this;
+        }
+
+        public Criteria andUpdatedNotEqualTo(Integer value) {
+            addCriterion("updated <>", value, "updated");
+            return (Criteria) this;
+        }
+
+        public Criteria andUpdatedGreaterThan(Integer value) {
+            addCriterion("updated >", value, "updated");
+            return (Criteria) this;
+        }
+
+        public Criteria andUpdatedGreaterThanOrEqualTo(Integer value) {
+            addCriterion("updated >=", value, "updated");
+            return (Criteria) this;
+        }
+
+        public Criteria andUpdatedLessThan(Integer value) {
+            addCriterion("updated <", value, "updated");
+            return (Criteria) this;
+        }
+
+        public Criteria andUpdatedLessThanOrEqualTo(Integer value) {
+            addCriterion("updated <=", value, "updated");
+            return (Criteria) this;
+        }
+
+        public Criteria andUpdatedIn(List<Integer> values) {
+            addCriterion("updated in", values, "updated");
+            return (Criteria) this;
+        }
+
+        public Criteria andUpdatedNotIn(List<Integer> values) {
+            addCriterion("updated not in", values, "updated");
+            return (Criteria) this;
+        }
+
+        public Criteria andUpdatedBetween(Integer value1, Integer value2) {
+            addCriterion("updated between", value1, value2, "updated");
+            return (Criteria) this;
+        }
+
+        public Criteria andUpdatedNotBetween(Integer value1, Integer value2) {
+            addCriterion("updated not between", value1, value2, "updated");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreatedIsNull() {
+            addCriterion("created is null");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreatedIsNotNull() {
+            addCriterion("created is not null");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreatedEqualTo(Integer value) {
+            addCriterion("created =", value, "created");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreatedNotEqualTo(Integer value) {
+            addCriterion("created <>", value, "created");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreatedGreaterThan(Integer value) {
+            addCriterion("created >", value, "created");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreatedGreaterThanOrEqualTo(Integer value) {
+            addCriterion("created >=", value, "created");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreatedLessThan(Integer value) {
+            addCriterion("created <", value, "created");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreatedLessThanOrEqualTo(Integer value) {
+            addCriterion("created <=", value, "created");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreatedIn(List<Integer> values) {
+            addCriterion("created in", values, "created");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreatedNotIn(List<Integer> values) {
+            addCriterion("created not in", values, "created");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreatedBetween(Integer value1, Integer value2) {
+            addCriterion("created between", value1, value2, "created");
+            return (Criteria) this;
+        }
+
+        public Criteria andCreatedNotBetween(Integer value1, Integer value2) {
+            addCriterion("created not between", value1, value2, "created");
+            return (Criteria) this;
+        }
+    }
+
+    /**
+     */
+    public static class Criteria extends GeneratedCriteria {
+
+        protected Criteria() {
+            super();
+        }
+    }
+
+    public static class Criterion {
+        private String condition;
+
+        private Object value;
+
+        private Object secondValue;
+
+        private boolean noValue;
+
+        private boolean singleValue;
+
+        private boolean betweenValue;
+
+        private boolean listValue;
+
+        private String typeHandler;
+
+        public String getCondition() {
+            return condition;
+        }
+
+        public Object getValue() {
+            return value;
+        }
+
+        public Object getSecondValue() {
+            return secondValue;
+        }
+
+        public boolean isNoValue() {
+            return noValue;
+        }
+
+        public boolean isSingleValue() {
+            return singleValue;
+        }
+
+        public boolean isBetweenValue() {
+            return betweenValue;
+        }
+
+        public boolean isListValue() {
+            return listValue;
+        }
+
+        public String getTypeHandler() {
+            return typeHandler;
+        }
+
+        protected Criterion(String condition) {
+            super();
+            this.condition = condition;
+            this.typeHandler = null;
+            this.noValue = true;
+        }
+
+        protected Criterion(String condition, Object value, String typeHandler) {
+            super();
+            this.condition = condition;
+            this.value = value;
+            this.typeHandler = typeHandler;
+            if (value instanceof List<?>) {
+                this.listValue = true;
+            } else {
+                this.singleValue = true;
+            }
+        }
+
+        protected Criterion(String condition, Object value) {
+            this(condition, value, null);
+        }
+
+        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
+            super();
+            this.condition = condition;
+            this.value = value;
+            this.secondValue = secondValue;
+            this.typeHandler = typeHandler;
+            this.betweenValue = true;
+        }
+
+        protected Criterion(String condition, Object value, Object secondValue) {
+            this(condition, value, secondValue, null);
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/fise/model/param/QueryFiseDeviceParam.java b/src/main/java/com/fise/model/param/QueryFiseDeviceParam.java
new file mode 100644
index 0000000..62d0706
--- /dev/null
+++ b/src/main/java/com/fise/model/param/QueryFiseDeviceParam.java
@@ -0,0 +1,52 @@
+package com.fise.model.param;
+
+import java.io.Serializable;
+
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fise.utils.JsonUtil;
+
+
+
+public class QueryFiseDeviceParam implements Serializable{
+	
+	private static final long serialVersionUID=1L;
+	
+	@JsonProperty("fise_id")
+	private Integer fiseId;
+	
+	private String ime;
+	
+	private String account;
+
+
+	public Integer getFiseId() {
+		return fiseId;
+	}
+
+	public void setFiseId(Integer fiseId) {
+		this.fiseId = fiseId;
+	}
+
+	public String getIme() {
+		return ime;
+	}
+
+	public void setIme(String ime) {
+		this.ime = ime;
+	}
+
+	public String getAccount() {
+		return account;
+	}
+
+	public void setAccount(String account) {
+		this.account = account;
+	}
+
+	@Override
+	public String toString() {
+		return JsonUtil.toJson(this);
+	}
+	
+}
diff --git a/src/main/java/com/fise/server/fisedevice/FiseDeviceService.java b/src/main/java/com/fise/server/fisedevice/FiseDeviceService.java
new file mode 100644
index 0000000..0094941
--- /dev/null
+++ b/src/main/java/com/fise/server/fisedevice/FiseDeviceService.java
@@ -0,0 +1,19 @@
+package com.fise.server.fisedevice;
+
+import com.fise.base.Response;
+import com.fise.model.entity.FiseDevice;
+import com.fise.model.param.QueryFiseDeviceParam;
+
+public interface FiseDeviceService {
+	/*添加新的fisedevice*/
+	public Response insertFiseDevice(FiseDevice record);
+	
+	/*查询设备信息*/
+	public Response queryFiseDevice(QueryFiseDeviceParam param);
+	
+	/*删除fise设备*/
+	public Response delFiseDevice(QueryFiseDeviceParam param);
+	
+	/*修改fise设备信息*/
+	public Response updateFiseDevice(FiseDevice param);
+}
diff --git a/src/main/java/com/fise/server/fisedevice/impl/FiseDeviceServiceImpl.java b/src/main/java/com/fise/server/fisedevice/impl/FiseDeviceServiceImpl.java
new file mode 100644
index 0000000..283b593
--- /dev/null
+++ b/src/main/java/com/fise/server/fisedevice/impl/FiseDeviceServiceImpl.java
@@ -0,0 +1,162 @@
+package com.fise.server.fisedevice.impl;
+
+
+import java.util.List;
+
+import org.apache.log4j.Logger;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import com.fise.base.ErrorCode;
+import com.fise.base.Response;
+import com.fise.dao.FiseDeviceMapper;
+
+import com.fise.model.entity.FiseDevice;
+import com.fise.model.entity.FiseDeviceExample;
+import com.fise.model.entity.FiseDeviceExample.Criteria;
+import com.fise.model.param.QueryFiseDeviceParam;
+import com.fise.server.fisedevice.FiseDeviceService;
+import com.fise.utils.StringUtil;
+
+@Service
+public class FiseDeviceServiceImpl implements FiseDeviceService{
+	
+	private Logger logger=Logger.getLogger(getClass());
+	
+	@Autowired
+	FiseDeviceMapper fiseDevicedao;
+	
+	@Override
+	public Response insertFiseDevice(FiseDevice record) {
+		
+		Response response=new Response();
+		
+		if(StringUtil.isEmpty(record.getIme())||record.getStatus()==null||StringUtil.isEmpty(record.getAccount())||record.getType()==null||record.getDepartid()==null){
+			return response.failure(ErrorCode.ERROR_FISE_DEVICE_PARAM_NULL);
+		}
+		
+		//判断添加的设备的IME是否已经存在
+		FiseDeviceExample exampleIME=new FiseDeviceExample();
+		Criteria criteriaIME=exampleIME.createCriteria();
+		criteriaIME.andImeEqualTo(record.getIme());
+		List<FiseDevice> fisedevicelist=fiseDevicedao.selectByExample(exampleIME);
+		if(fisedevicelist.size()!=0){
+			response.failure(ErrorCode.ERROR_FISE_DEVICE_IME_EXISTED);
+			return response;
+		}
+		
+		//判断添加的设备的账号是否已经注册
+		FiseDeviceExample exampleAccount=new FiseDeviceExample();
+		Criteria criteriaAccount=exampleAccount.createCriteria();
+		criteriaAccount.andAccountEqualTo(record.getAccount());
+		List<FiseDevice> list=fiseDevicedao.selectByExample(exampleAccount);
+		if(list.size()!=0){
+			response.failure(ErrorCode.ERROR_FISE_DEVICE_ACCOUNT_EXISTED);
+			return response;
+		}
+		
+		//更新设备相关信息
+		long nowtime=System.currentTimeMillis() / 1000;
+		record.setUpdated((int)nowtime);
+		record.setCreated((int)nowtime);
+		fiseDevicedao.insert(record);
+		response.success();
+		return response;
+	}
+
+	@Override
+	public Response queryFiseDevice(QueryFiseDeviceParam param) {
+		
+		Response response=new Response();
+		
+		if(StringUtil.isEmpty(param.getAccount()) && StringUtil.isEmpty(param.getIme())){
+			return response.failure(ErrorCode.ERROR_FISE_DEVICE_PARAM_NULL);
+		}
+		
+		FiseDeviceExample example=new FiseDeviceExample();
+		Criteria criteria=example.createCriteria();
+		
+		
+		if(!StringUtil.isEmpty(param.getIme())){
+			criteria.andImeEqualTo(param.getIme());
+		}
+		
+		if(!StringUtil.isEmpty(param.getAccount())){
+			criteria.andAccountEqualTo(param.getAccount());	
+		} 
+		
+		List<FiseDevice> fisedevicelist=fiseDevicedao.selectByExample(example);
+		
+		if(fisedevicelist.size()!=0){
+			response.success(fisedevicelist.get(0));
+			return response;
+		}
+		
+		return response.failure(ErrorCode.ERROR_DB_RECORD_ALREADY_UNEXIST);
+	}
+
+	@Override
+	public Response delFiseDevice(QueryFiseDeviceParam param) {
+		
+		Response response=new Response();
+		
+		if(param.getFiseId()==null){
+			return response.failure(ErrorCode.ERROR_FISE_DEVICE_PARAM_NULL);
+		}
+		
+		fiseDevicedao.deleteByPrimaryKey(param.getFiseId());
+		return response.success();
+		
+	}
+
+	@Override
+	public Response updateFiseDevice(FiseDevice param) {
+
+		Response response=new Response();
+		
+		if(param.getFiseId()==null){
+			return response.failure(ErrorCode.ERROR_FISE_DEVICE_PARAM_NULL);
+		}
+		
+		if(!StringUtil.isEmpty(param.getIme())){
+			//判断添加的设备的IME是否已经存在
+			FiseDeviceExample exampleIME=new FiseDeviceExample();
+			Criteria criteriaIME=exampleIME.createCriteria();
+			criteriaIME.andImeEqualTo(param.getIme());
+			List<FiseDevice> fisedevicelist=fiseDevicedao.selectByExample(exampleIME);
+			if(fisedevicelist.size()!=0){
+				if(StringUtil.equals(param.getIme(),fisedevicelist.get(0).getIme())){
+				
+				}else{
+					response.failure(ErrorCode.ERROR_FISE_DEVICE_IME_EXISTED);
+					return response;
+				}
+			}
+		}
+		
+		if(!StringUtil.isEmpty(param.getAccount())){
+			//判断添加的设备的账号是否已经注册
+			FiseDeviceExample exampleAccount=new FiseDeviceExample();
+			Criteria criteriaAccount=exampleAccount.createCriteria();
+			criteriaAccount.andAccountEqualTo(param.getAccount());
+			List<FiseDevice> list=fiseDevicedao.selectByExample(exampleAccount);
+			if(list.size()!=0){
+				if(StringUtil.equals(param.getAccount(),list.get(0).getAccount())){
+					
+				}else{
+					response.failure(ErrorCode.ERROR_FISE_DEVICE_ACCOUNT_EXISTED);
+					return response;
+				}
+			}
+		}
+		
+		//更新设备相关信息
+		long nowtime=System.currentTimeMillis() / 1000;
+		param.setUpdated((int)nowtime);
+		fiseDevicedao.updateByPrimaryKeySelective(param);
+		response.success();
+		return response;
+		
+	}
+
+}
diff --git a/src/main/resources/spring-mvc.xml b/src/main/resources/spring-mvc.xml
index fbb23fc..2ea146f 100644
--- a/src/main/resources/spring-mvc.xml
+++ b/src/main/resources/spring-mvc.xml
@@ -17,6 +17,7 @@
        					http://www.springframework.org/schema/aop/spring-aop.xsd">
 	<!-- 自动扫描该包 -->
 	<context:component-scan base-package="com.fise" />
+	
 	<mvc:annotation-driven />
 	
 	<!-- 开启参数验证 -->
